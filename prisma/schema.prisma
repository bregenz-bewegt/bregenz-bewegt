// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("NX_DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  username               String?         @unique
  email                  String?         @unique
  fingerprint            String?         @unique
  active                 Boolean         @default(false)
  firstname              String?
  lastname               String?
  role                   Role
  registratedAt          DateTime        @default(now())
  updatedAt              DateTime        @default(now()) @updatedAt
  password               String?
  refreshToken           String?
  passwordResetToken     String?
  emailResetToken        String?
  activationSecret       String?
  profilePicture         String?
  preferences            Preferences?
  activities             Activity[]
  friends                User[]          @relation("friends")
  friendsRelation        User[]          @relation("friends")
  friendRequests         FriendRequest[] @relation("requestee")
  friendRequestsRelation FriendRequest[] @relation("addressee")

  @@index([email])
}

model Preferences {
  id           Int          @id @default(autoincrement())
  difficulties Difficulty[]
  public       Boolean      @default(true)
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?      @unique
}

enum DifficultyType {
  BEGINNER
  ADVANCED
  GAME
}

model Difficulty {
  id          Int            @id @default(autoincrement())
  difficulty  DifficultyType @unique
  exercises   Exercise[]
  preferences Preferences[]
}

enum Role {
  USER
  GUEST
}

model Park {
  id          Int          @id @default(autoincrement())
  qr          String       @unique
  name        String
  address     String
  image       String
  gmaps       String?
  coordinates Coordinates?
  exercises   Exercise[]
  activities  Activity[]
}

model Coordinates {
  id              Int   @id @default(autoincrement())
  latitude        Float
  longitude       Float
  toleranceRadius Int   @default(50)
  park            Park? @relation(fields: [parkId], references: [id])
  parkId          Int?  @unique
}

model Activity {
  id         String    @id @default(cuid())
  startedAt  DateTime
  endedAt    DateTime?
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  park       Park      @relation(fields: [parkId], references: [id])
  parkId     Int
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Exercise {
  id           Int         @id @default(autoincrement())
  name         String
  description  String      @db.VarChar(1000)
  execution    String?
  muscles      String?
  video        String
  coins        Int
  difficulty   Difficulty? @relation(fields: [difficultyId], references: [id])
  difficultyId Int?
  parks        Park[]
  activities   Activity[]
}

model FriendRequest {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  requestee   User     @relation("requestee", fields: [requesteeId], references: [id])
  requesteeId String
  addressee   User     @relation("addressee", fields: [addresseeId], references: [id])
  addresseeId String
}
